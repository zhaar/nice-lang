
PDefs.   Program ::= [Def] ;
terminator Def "" ;

comment "//" ;
comment "/*" "*/" ;

DEnum.     Def ::= "enum" TypeID "{" [SumType] "}" ;
separator SumType "," ;
EEmpty.    SumType ::= TypeID ;
EProd.     SumType ::= TypeID "(" [TypeAnnotation] ")" ;
separator nonempty TypeAnnotation "," ;

DeclIdTyp. IdTyped ::= Id ":" TypeAnnotation ;
separator  IdTyped "," ;
DFunStmt.  Def ::= "let" Id "(" [IdTyped] ")" "->" TypeAnnotation "{" [Stmt] "}" ;
DFunExpr.  Def ::= "let" Id "(" [IdTyped] ")" "->" TypeAnnotation Expr ;
DImmutLet. Def ::= "let" IdTyped "=" Expr ;
DimmutInf. Def ::= "let" Id "=" Expr ;
DMutLet.   Def ::= "let" "~" IdTyped "=" Expr ;
DMutInf.   Def ::= "let" "~" Id "=" Expr ;
SWhile.   Stmt ::= "while(" Expr ")" "{" [Stmt] "}" ;


FApp.    Expr13 ::= Id "(" [Expr] ")" ;
IdExpr.  Expr13 ::= Id ;

EInt.    Expr13 ::= Integer ;
Double.  Expr13 ::= Double ;
True.    Expr13 ::= "true" ;
EFalse.  Expr13 ::= "false" ;
EApp.    Expr13 ::= Id "(" [Expr] ")" ;

ETimes.  Expr12 ::= Expr12 "*"  Expr13 ;
EDiv.    Expr12 ::= Expr12 "/"  Expr13 ;
EPlus.   Expr11 ::= Expr11 "+"  Expr12 ;
EMinus.  Expr11 ::= Expr11 "-"  Expr12 ;
ELt.     Expr9  ::= Expr9  "<"  Expr10 ;
EGt.     Expr9  ::= Expr9  ">"  Expr10 ;
ELtEq.   Expr9  ::= Expr9  "<=" Expr10 ;
EGtWq.   Expr9  ::= Expr9  ">=" Expr10 ;
EEq.     Expr8  ::= Expr8  "==" Expr9 ;
ENEq.    Expr8  ::= Expr8  "!=" Expr9 ;
EAnd.    Expr4  ::= Expr4  "&&" Expr5 ;
EOr.     Expr3  ::= Expr3  "||" Expr4 ;
EAss.    Expr2  ::= Expr3 "=" Expr2 ;
separator Expr "," ;
coercions Expr 13 ;

IfExpr.  Expr ::= "if" Expr "then" Expr "else" Expr ;

terminator Stmt "" ;


ImmType. TypeAnnotation ::= Type ;
PtrType. TypeAnnotation ::= ">" TypeAnnotation ;
MutPtr.  TypeAnnotation ::= "~>" TypeAnnotation ;
MutAll.  TypeAnnotation ::= "~>~" TypeAnnotation ;

Tbool.   RType ::= "bool" ;
Tdouble. RType ::= "double" ;
Tint.    RType ::= "int" ;
Tvoid.   RType ::= "void" ;
Tident.  RType ::= TypeID ;
Tfun1.   FType ::= RType "->" Type ;
Tfun2.   FType ::= "(" Type ")" "->" Type ;


TRaw.    Type ::= RType ;
TFun.    Type ::= FType ;

token TypeID (upper (letter | digit | '_')*) ;
token Id (lower (letter | digit | '_')*) ;
